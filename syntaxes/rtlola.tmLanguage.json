{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "RTLola",
	"patterns": [
	  {
		"include": "#import"
	  },
	  {
		"include": "#input"
	  },
	  {
		"include": "#include"
	  },
	  {
		"include": "#constant"
	  },
	  {
		"include": "#output"
	  },
	  {
		"include": "#trigger"
	  },
	  {
		"include": "#keywords"
	  },
	  {
		"include": "#strings"
	  },
	  {
		"include": "#constants"
	  },
	  {
		"include": "#block_comment"
	  },
	  {
		"include": "#line_comment"
	  },
	  {
		"include": "#number"
	  },
	  {
		"include": "#expression"
	  }
	],
	"repository": {
	  "keywords": {
		"patterns": [
		  {
			"name": "keyword.other.rtlola",
			"match": "\\b(if|then|else)\\b"
		  },
		  {
			"name": "keyword.other.rtlola",
			"match": "\\b(input|output|trigger|import|constant|spawn|eval|close|with|when)\\b"
		  }
		]
	  },
	  "constants": {
		"patterns": [
		  {
			"name": "constant.language.rtlola",
			"match": "\\b(true|false)\\b"
		  }
		]
	  },
	  "strings": {
		"name": "string.quoted.double.rtlola",
		"begin": "\"",
		"end": "\"",
		"patterns": []
	  },
	  "line_comment": {
		"name": "comment.line.double-slash.rtlola",
		"begin": "//",
		"end": "$"
	  },
	  "block_comment": {
		"name": "comment.block.rtlola",
		"begin": "/\\*",
		"end": "\\*/"
	  },
	  "import": {
		"name": "meta.import.rtlola",
		"match": "\\b(import)(\\s+|(\\s*(/\\*((?!\\*/).)*\\*/)\\s*))([a-zA-Z][a-z_A-Z0-9]*)(?=\\s|/)",
		"captures": {
		  "1": {
			"name": "keyword.other.import.rtlola"
		  },
		  "4": {
			"name": "comment.block.rtlola"
		  },
		  "6": {
			"name": "support.other.rtlola"
		  }
		}
	  },
	  "include": {
		"name": "meta.include.rtlola",
		"match": "\\b((include)|(inclu?d?e?))\\s*((\\w+(\\\")?)|(\\\"((\\\\\\\\)|(\\\\\\\")|(?!\\\").)*\\\")|(\\\"((\\\\\\\\)|(\\\\\\\")|(?!\\\").)*))",
		"captures": {
		  "1": {
			"name": "keyword.other.include.rtlola"
		  },
		  "3": {
			"name": "invalid.illegal.rtlola"
		  },
		  "4": {
			"name": "string.quoted.double.rtlola"
		  },
		  "5": {
			"name": "invalid.illegal.rtlola"
		  },
		  "11": {
			"name": "invalid.illegal.rtlola"
		  }
		}
	  },
	  "input": {
		"name": "meta.input.rtlola",
		"match": "\\b((input)|(inpu?t?))\\s+(([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(\\(((([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))\\s*(:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?)?(,((([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?))*\\))?\\s*:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?(\\s*,\\s*(([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(\\(((([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?)?(,((([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?))*\\))?\\s*:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)*",
		"captures": {
		  "1": {
			"name": "keyword.other.input.rtlola"
		  },
		  "3": {
			"name": "invalid.illegal.rtlola"
		  },
		  "4": {
			"name": "variable.other.rtlola"
		  },
		  "6": {
			"name": "invalid.illegal.rtlola"
		  },
		  "7": {
			"name": "meta.parameterlist.rtlola"
		  },
		  "9": {
			"name": "variable.parameter.rtlola"
		  },
		  "11": {
			"name": "invalid.illegal.rtlola"
		  },
		  "13": {
			"name": "entity.name.type.rtlola"
		  },
		  "15": {
			"name": "invalid.illegal.rtlola"
		  },
		  "25": {
			"name": "variable.parameter.rtlola"
		  },
		  "27": {
			"name": "invalid.illegal.rtlola"
		  },
		  "29": {
			"name": "entity.name.type.rtlola"
		  },
		  "31": {
			"name": "invalid.illegal.rtlola"
		  },
		  "39": {
			"name": "entity.name.type.rtlola"
		  },
		  "41": {
			"name": "invalid.illegal.rtlola"
		  },
		  "50": {
			"name": "variable.other.rtlola"
		  },
		  "52": {
			"name": "invalid.illegal.rtlola"
		  },
		  "53": {
			"name": "meta.parameterlist.rtlola"
		  },
		  "55": {
			"name": "variable.parameter.rtlola"
		  },
		  "57": {
			"name": "invalid.illegal.rtlola"
		  },
		  "59": {
			"name": "entity.name.type.rtlola"
		  },
		  "61": {
			"name": "invalid.illegal.rtlola"
		  },
		  "71": {
			"name": "variable.parameter.rtlola"
		  },
		  "73": {
			"name": "invalid.illegal.rtlola"
		  },
		  "75": {
			"name": "entity.name.type.rtlola"
		  },
		  "77": {
			"name": "invalid.illegal.rtlola"
		  },
		  "85": {
			"name": "entity.name.type.rtlola"
		  },
		  "87": {
			"name": "invalid.illegal.rtlola"
		  }
		}
	  },
	  "constant": {
		"name": "meta.constant.rtlola",
		"begin": "\\b((constant)|(consta?n?t?))\\s+(([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*((:(?!=)\\s*)?(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?\\s*(:=)?",
		"end": "$",
		"beginCaptures": {
		  "1": {
			"name": "keyword.other.constant.rtlola"
		  },
		  "3": {
			"name": "invalid.illegal.rtlola"
		  },
		  "4": {
			"name": "variable.other.rtlola"
		  },
		  "6": {
			"name": "invalid.illegal.rtlola"
		  },
		  "9": {
			"name": "entity.name.type.rtlola"
		  },
		  "11": {
			"name": "invalid.illegal.rtlola"
		  },
		  "14": {
			"name": "invalid.illegal.rtlola"
		  },
		  "18": {
			"name": "invalid.illegal.rtlola"
		  },
		  "19": {
			"name": "keyword.operator.assignment.rtlola"
		  }
		},
		"patterns": [
		  {
			"include": "#keywords"
		  },
		  {
			"include": "#strings"
		  },
		  {
			"include": "#constants"
		  },
		  {
			"include": "#block_comment"
		  },
		  {
			"include": "#line_comment"
		  },
		  {
			"include": "#number"
		  },
		  {
			"include": "#expression"
		  }
		]
	  },
	  "output": {
		"name": "statement.output.rtlola",
		"match": "\\b((output)|(outpu?t?))\\s+(([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(\\(((([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))\\s*(:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?)?(,((([a-zA-Z][a-z_A-Z\\d]*\\b)|([\\w\\d]*))?\\s*(:\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?)?))*\\))?\\s*:?\\s*(?!((spawn)|(eval)|(close)))(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??)|\\(\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?(\\s*,\\s*(\\b_\\b|([a-zA-Z][a-z_A-Z\\d]*\\b\\??)|([\\w\\d]+\\??))?)*\\s*\\)?)?",
		"captures": {
		  "1": {
			"name": "keyword.other.output.rtlola"
		  },
		  "3": {
			"name": "invalid.illegal.rtlola"
		  },
		  "4": {
			"name": "variable.other.rtlola"
		  },
		  "6": {
			"name": "invalid.illegal.rtlola"
		  },
		  "9": {
			"name": "variable.parameter.rtlola"
		  },
		  "11": {
			"name": "invalid.illegal.rtlola"
		  },
		  "13": {
			"name": "entity.name.type.rtlola"
		  },
		  "15": {
			"name": "invalid.illegal.rtlola"
		  },
		  "18": {
			"name": "invalid.illegal.rtlola"
		  },
		  "22": {
			"name": "invalid.illegal.rtlola"
		  },
		  "25": {
			"name": "variable.parameter.rtlola"
		  },
		  "27": {
			"name": "invalid.illegal.rtlola"
		  },
		  "29": {
			"name": "entity.name.type.rtlola"
		  },
		  "31": {
			"name": "invalid.illegal.rtlola"
		  },
		  "34": {
			"name": "invalid.illegal.rtlola"
		  },
		  "38": {
			"name": "invalid.illegal.rtlola"
		  },
		  "43": {
			"name": "entity.name.type.rtlola"
		  },
		  "45": {
			"name": "invalid.illegal.rtlola"
		  },
		  "48": {
			"name": "invalid.illegal.rtlola"
		  },
		  "52": {
			"name": "invalid.illegal.rtlola"
		  },
		  "54": {
			"name": "invalid.illegal.rtlola"
		  }
		}
	  },
	  "trigger": {
		"name": "statement.trigger.rtlola",
		"begin": "\\b(trigg?e?r?)\\b",
		"end": "(?=\\b(input|output|trigger)\\b)",
		"beginCaptures": {
		  "1": {
			"name": "keyword.other.trigger.rtlola"
		  }
		},
		"patterns": [
		  {
			"include": "#keywords"
		  },
		  {
			"include": "#strings"
		  },
		  {
			"include": "#constants"
		  },
		  {
			"include": "#block_comment"
		  },
		  {
			"include": "#line_comment"
		  },
		  {
			"include": "#number"
		  },
		  {
			"include": "#expression"
		  }
		]
	  },
	  "frequency": {
		"match": "@(\\s*(/\\*((?!\\*/).)*\\*/)?\\s*)((\\+|-)?[0-9]+(\\.[0-9][0-9]*)?(e(\\+|-)?[0-9]+)?(μHz|uHz|mHz|Hz|kHz|MHz|GHz)?)",
		"captures": {
		  "2": {
			"name": "comment.block.rtlola"
		  },
		  "4": {
			"name": "constant.numeric.frequency.rtlola"
		  }
		}
	  },
	  "number": {
		"match": "\\b([0-9]+(\\.[0-9][0-9]*)?(e(\\+|-)?[0-9]+)?)",
		"captures": {
		  "1": {
			"name": "constant.numeric.rtlola"
		  }
		}
	  },
	  "expression": {
		"patterns": [
		  {
			"comment": "Output stream definition",
			"name": "keyword.operator.misc.rtlola",
			"match": ":="
		  },
		  {
			"comment": "Miscellaneous operator",
			"name": "keyword.operator.misc.rtlola",
			"match": "(=>|::|¬)"
		  },
		  {
			"comment": "Comparison operator",
			"name": "keyword.operator.comparison.rtlola",
			"match": "(∧|∨|\\bor\\b|\\and\\b|&&|\\|\\||==|(?<!:)=|!=)"
		  },
		  {
			"comment": "Assignment operator",
			"name": "keyword.operator.assignment.rtlola",
			"match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=)"
		  },
		  {
			"comment": "Arithmetic operator",
			"name": "keyword.operator.arithmetic.rtlola",
			"match": "(~|!|\\+\\+|\\+|--|-|/|\\*\\*|\\*|%|\\^|&|\\||<<|>>>=|>>>|>>)"
		  },
		  {
			"comment": "Comparison operator (second group because of regex precedence)",
			"name": "keyword.operator.comparison.rtlola",
			"match": "(<=|>=|<|>|&)"
		  },
		  {
			"match": "\\.(aggregate)\\(\\s*((over|over\\_exactly)\\s*:\\s*((\\+|-)?[0-9]+(\\.[0-9][0-9]*)?(e(\\+|-)?[0-9]+)?(ns|μs|us|ms|s|min|h|d|w|a)))?",
			"captures": {
			  "1": {
				"name": "keyword.operator.access"
			  },
			  "4": {
				"name": "constant.numeric.time.rtlola"
			  }
			}
		  },
		  {
			"match": "\\.(hold)\\(",
			"captures": {
			  "1": {
				"name": "keyword.operator.access"
			  }
			}
		  },
		  {
			"match": "\\.(offset)\\(",
			"captures": {
			  "1": {
				"name": "keyword.operator.access"
			  }
			}
		  },
		  {
			"match": "\\.(defaults)\\(",
			"captures": {
			  "1": {
				"name": "keyword.operator.default"
			  }
			}
		  }
		]
	  }
	},
	"scopeName": "source.rtlola"
  }
  